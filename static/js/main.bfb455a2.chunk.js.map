{"version":3,"sources":["core/QRcode.jsx","components/Titulo.jsx","main/App.jsx","reportWebVitals.js","index.js"],"names":["QRcodeGenerator","useState","qrCode","setQrcode","data","qrious","size","text","Fragment","className","type","placeholder","value","onChange","e","target","src","toDataURL","alt","Titulo","props","texto","subtitle","App","QRcode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAoDeA,MA/Cf,WACI,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAO,CACTC,OAAQ,IAAIA,IAAO,CAACC,KAAM,MAC1BC,KAAK,GAAD,OAAKL,IAoBb,OACI,eAAC,IAAMM,SAAP,WAGI,qBAAKC,UAAU,YAAf,SACI,uBAAOC,KAAK,OACRJ,KAAK,KACLK,YAAY,4BACZF,UAAU,QACVG,MAAOV,EACPW,SAAU,SAAAC,GAAC,OAAIX,EAAUW,EAAEC,OAAOH,YAK1C,qBAAKI,IA7BNZ,EAAKG,MAEJH,EAAKC,OAAOO,MAAQR,EAAKG,KAClBH,EAAKC,OAAOY,kBAGnB,EAuBuBC,IAAI,GAAGT,UAAU,gB,YC/BrCU,MAVf,SAAgBC,GACZ,OACA,eAAC,IAAMZ,SAAP,WACI,6BAAKY,EAAMC,QACX,6BAAKD,EAAME,eCQJC,MAVf,WACI,OACI,sBAAKd,UAAU,YAAf,UACI,cAAC,EAAD,CAAQY,MAAM,oBAAoBC,SAAS,qBAC3C,cAACE,EAAD,QCEGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bfb455a2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport qrious from \"qrious\";\nimport '../components/Input.css';\n\n\nfunction QRcodeGenerator() {\n    const [qrCode, setQrcode] = useState('')\n    \n    const data = {\n        qrious: new qrious({size: 300}),\n        text: `${qrCode}`\n    }\n\n\n    const newQrcode = () => {\n    \n        if(data.text) {\n            \n            data.qrious.value = data.text\n            return data.qrious.toDataURL()\n            \n        } else {\n            return\n        }\n\n    }\n\n\n    \n\n    return (\n        <React.Fragment>\n            \n\n            <div className=\"inputCamp\">\n                <input type=\"text\" \n                    size=\"25\"\n                    placeholder=\"Digite aqui seu desejo...\"\n                    className=\"Input\"\n                    value={qrCode}\n                    onChange={e => setQrcode(e.target.value)}\n                />\n            </div>\n\n\n            <img src={newQrcode()} alt=\"\" className=\"qrimage\" />\n        </React.Fragment>\n    )\n\n}\n\n\nexport default QRcodeGenerator","import React from \"react\";\nimport './Titulo.css';\n\n\nfunction Titulo(props) {\n    return (\n    <React.Fragment>\n        <h1>{props.texto}</h1>\n        <h3>{props.subtitle}</h3>\n    </React.Fragment>\n    )\n}\n\n\nexport default Titulo;","import React from \"react\";\nimport QRcodeGenerator from '../core/QRcode'\nimport './App.css'\n\nimport Titulo from \"../components/Titulo\";\n\nfunction App() {\n    return (\n        <div className=\"container\">\n            <Titulo texto=\"Gerador de QRcode\" subtitle=\"Feito em ReactJS\" />\n            <QRcodeGenerator />\n        </div>\n    )\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}